#!/usr/bin/env node

var program = require('commander')
var mkdirp = require('mkdirp')
var os = require('os')
var fs = require('fs')
var path = require('path')
var renderer= require('ejs')

var version = require('../package.json').version

function authParser(values){
    if(values==='false' || values==='null' || values=='0' || values==null)
        return false;
    var auths= {
        local: true
    };
    values.length && values.split(':').map(function(value){
       auths[value]= true;
    });
    return auths
}

// CLI
program
    .version(version)
    .usage('[options] [dir]')
    .option('-t, --theme [name]','switch application theme to <name> [white|green|violet|red]. Defaults to red.','red')
    .option('-d, --db [engine]', 'change database <engine> to one of [mysql|postgresql|mongo|redis|memory|disk]. Defaults to disk.', 'disk')
    .option('-c, --css [engine]', 'add stylesheet <engine> support [less|stylus|plain]. Defaults to plain css.','plain')
    .option('-a, --auth [type]',
        'add [type] authentication support [facebook|google|github|bitbucket|local]. Defaults to local only.\n'+
        'Use ":" as separator for multiples (f.x. local:facebook:google). Set to "false" (like `koa-mvc ... -a false`) to disable.',
        authParser,
        {local: true}
    )
    .option('-e, --template [engine]', 'change template engine. Support [ejs] only for now. Defaults to ejs.','ejs')
    .option('-i, --i18n', 'add i18n support. Translations used by i18n-node-2 ported to koa-i18n  ', Boolean, false)
    .option('-S, --no-session', 'remove session support. Session is enabled by default.', Boolean, true)
    .option('-f, --force', 'force on non-empty directory')
    .parse(process.argv);

// Path
var source_path=path.join(__dirname, '..', 'templates','app');
var destination_path = path.resolve(program.args.shift() || '.');

// App name
var app_name = path.basename(destination_path);

// Options
//template engine
if(['ejs'].indexOf(program.template)===-1)
    throw new Error('Invalid template engine "'+program.template+'" ');
//db
if(['mysql','postgresql','mongo','redis','memory','disk'].indexOf(program.db)===-1)
    throw new Error('Invalid db engine "'+program.db+'" ');
//css engine
if(['less','stylus','plain'].indexOf(program.css)===-1)
    throw new Error('Invalid css engine "'+program.css+'" ');

// Generate application
(function createApplication(path) {
  emptyDirectory(path, function(empty){
    if (empty || program.force) {
      createApplicationAt(path);
    } else {
        program.confirm('destination "'+path+'" is not empty, continue? ', function(ok){
            if (ok) {
                process.stdin.destroy();
                createApplicationAt(path);
            } else {
                abort('aborting');
            }
        });
    }
  });
})(destination_path);

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplicationAt(path) {
mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log();
    process.on('exit', function(){
        console.log();
        console.log('   install dependencies:');
        console.log('     $ cd %s && npm install', path);
        console.log();
        console.log('   run the app:');
        console.log('     $ DEBUG=' + app_name + ' node --harmony app');
        console.log();
    });

    //###config

    //###controllers
    mkdir('/controllers', function(){
        copy_template('controllers/site.ejs','controllers/site.js');
        if(program.auth){
            render_template('controllers/auth.ejs','controllers/auth.js',{
                program: program,
                name: app_name,
            });
        }
    });

    mkdir('/configs', function(){
        render_template('/configs/main.ejs','/configs/main.js',{
            name: app_name,
            program: program,
            key: require('crypto').randomBytes(20).toString('hex'),
        });
        render_template('configs/database.ejs','configs/database.js');
        render_template('configs/routes.ejs','configs/routes.js');
        render_template('configs/view-locals.ejs','configs/view-locals.js');
        render_template('configs/view-filters.ejs','configs/view-filters.js');
        if(program.auth)
            render_template('/configs/auth.ejs','/configs/auth.js');
    });

    //###models
    mkdir('/models', function(){
        render_template('models/user.ejs','models/user.js');
    });

    //###locales
    if(program.i18n){
        mkdir('/locales', function(){
            render_template('locales/en.ejs','locales/en.js');
        });
    }

    //###views
    mkdir('/views', function(){
        var baseViewsPath='views/'+program.template;
        //changes open clone to be able to use ejs in templates already using ejs
        var template_options={open: '<%%', close: '%%>'};
        mkdir('/views/site', function(){
            render_template(baseViewsPath+'/site/index.ejs','views/site/index.html',template_options);
            if(program.auth)
                render_template(baseViewsPath+'/site/login.ejs','views/site/login.html',template_options);
        });
        mkdir('/views/error', function(){
            render_template(baseViewsPath+'/error/401.ejs', 'views/error/401.html',template_options);
            render_template(baseViewsPath+'/error/403.ejs', 'views/error/403.html',template_options);
            render_template(baseViewsPath+'/error/404.ejs', 'views/error/404.html',template_options);
            render_template(baseViewsPath+'/error/error.ejs', 'views/error/error.html',template_options);
        });
        mkdir('/views/layouts', function(){
            render_template(baseViewsPath+'/layouts/main.ejs', 'views/layouts/main.html',template_options);
            render_template(baseViewsPath+'/layouts/error.ejs', 'views/layouts/error.html',template_options);
        });
    });

    //###web
    mkdir('/web', function(){
        mkdir('/web/js', function(){
            render_template('/web/js/main.ejs', '/web/js/main.js');
        });
        mkdir('/web/img');
        mkdir('/web/css', function(){
            // CSS Engine support
            switch (program.css) {
                case 'less':
                    render_template('/web/css/main.less.ejs','/web/css/main.less');
                    break;
                case 'stylus':
                    render_template('/web/css/main.styl.ejs','/web/css/main.styl');
                    break;
                default:
                    render_template('/web/css/main.css.ejs','/web/css/main.css');
            }
        });
    });

    render_template('/package.ejs','/package.json',{},0755);
    render_template('/app.ejs', '/app.js',{},0755);

});
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */
function copy_template(from, to) {
    if(!to)
        to=from;
    write(to, load_template(from))
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */
function render_template(from, to, options, mode){
    if(!to)
        to=from;
    var default_options={program: program,name: app_name};
    if(!options)
        options=default_options;
    else {
        for(x in default_options)
            options[x]=default_options[x];
    }

    var str= renderer.render(load_template(from), options);
    return write(to, str, mode);
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */
function load_template(name) {
    return fs.readFileSync(path.join(source_path, name), 'utf-8')
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(file, str, mode, fn) {
    var writePath=path.join(destination_path, file);
    fs.writeFile(writePath, str, { mode: mode || 0666 },function(err){
        if (err) throw err;
        console.log('   \x1b[36mcreate\x1b[0m : ' + writePath);
        fn && fn();
    });
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(name, fn) {
    var writePath=path.join(destination_path,name);
    mkdirp(writePath, 0755, function(err){
        if (err) throw err;
        console.log('   \033[36mcreate\033[0m : ' + writePath);
        fn && fn();
    });
}

/**
 *
 * Check if the given directory `path` is empty.
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
    fs.readdir(path, function(err, files){
        if (err && 'ENOENT' != err.code)
            throw err;
        fn(!files || !files.length);
    });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
    console.error(str);
    process.exit(1);
}
